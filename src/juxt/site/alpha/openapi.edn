;; This source file is in EDN only for editing purposes. It should be
;; transformed to JSON or YAML as soon as it is uploaded or otherwise put into
;; Crux.
{:openapi "3.0.2"

 :info
 {:version "1.0.0"
  :title "Site API"
  :description
  "Managing Site APIs, users, roles, and policies."

  :contact
  {:name "Webmaster"
   :email "webmaster@<canonical-host>"
   :url "<canonical-host>"}}

 :servers [{:url "/_site"}]

 :paths
 {"/users/"
  {:get
   {:description "Returns a list of all the users you're allowed to view"
    :operationId "findUsers"

    :responses
    {200
     {:crux/query
      {:find [e]
       :where [[e :juxt.site.alpha/type t]]
       :args [{t "User"}]}

      :content
      {"application/json"
       {:schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedUser"}}}

       "text/html;charset=utf-8"
       {:title "Users"
        :type "edn-table"
        :schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedUser"}}}}}}}}

  "/users/{id}"
  {:parameters
   [{:name "id" :in "path" :required true
     :description "User id"
     :schema {:type "string"}}]

   :get
   {:description "Returns a given user",
    :operationId "findUserById",

    :responses
    {200
     {:description "Single identified user"
      :content
      {"application/json"
       {:schema {"$ref" "#/components/schemas/User"}}

       "text/html;charset=utf-8"
       {:title "User"
        :schema {"$ref" "#/components/schemas/User"}}}}}}

   :put
   {:description "Upserts a user"
    :operationId "putUser"
    :requestBody
    {:required true
     :content
     {"application/json"
      {:schema {"$ref" "#/components/schemas/User"}
       :example {"type" "User"
                 "name" "John Doe"
                 "email" "john@example.com"}}}}

    :responses
    {201 {:description "User successfully created"
          :content {"text/plain;charset=utf-8" {}}}

     204 {:description "User successfully updated"
          :content {"text/plain;charset=utf-8" {}}}}}

   :delete
   {:description "Deletes a user"
    :operationId "deleteUser"

    :responses
    {204 {:description "User successfully deleted"
          :content {"text/plain;charset=utf-8" {}}}}}}

  "/users/{id}/password"
  {:parameters
   [{:name "id" :in "path" :required true
     :description "User id"
     :schema {:type "string"}}]

   :put
   {:description "Puts a new password"
    :operationId "putPassword"
    :requestBody
    {:required true
     :content
     {"application/json"
      {:schema {"$ref" "#/components/schemas/Password"}
       :example {"type" "Password"
                 "password" "TigerBuffalo42^&"}}}}

    :responses
    {200 {:description "Password successfully updated"
          :content {"text/plain;charset=utf-8" {}}}
     201 {:description "Password successfully created"
          :content {"text/plain;charset=utf-8" {}}}}}}

  "/roles/"
  {:get
   {:description "Returns all roles"
    :operationId "findRoles"
    :parameters
    [{:name "limit" :in "query" :required false :default 100
      :description "Maximum number of results to return"
      :schema {:type "integer"}}]
    :responses
    {200 {:crux/query
          {:find [e]
           :where [[e :juxt.site.alpha/type t]]
           :args [{t "Role"}]
           :limit {:in "query" :name "limit"}}

          :content
          {"application/json"
           {:schema
            {:type "array"
             :items {"$ref" "#/components/schemas/IdentifiedRole"}}}

           "text/html;charset=utf-8" {:title "Roles"
                                      :type "edn-table"}}}}}}

  "/roles/{id}"
  {:get
   {:description "Returns a given role"
    ;; NOTE: Path-object level parameters not yet supported!!
    :parameters
    [{:name "id" :in "path" :required true
      :description "Role id"
      :schema {:type "string"}}]
    :operationId "findRoleById"

    :responses
    {200 {:description "Single identified role"
          :content
          {"application/json" {:schema {"$ref" "#/components/schemas/Role"}}

           "text/html;charset=utf-8" {:title "Role"}}}}}

   :put
   {:description "Upserts a role"
    :operationId "putRole"
    :parameters
    [{:name "id" :in "path" :required true
      :description "Role id"
      :schema {:type "string"}}]
    :requestBody
    {:required true
     :content
     {"application/json" {:schema {"$ref" "#/components/schemas/Role"}}}}
    :responses
    {200 {:description "Role successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}
     201 {:description "Role successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}

  "/roles/{id}/users/{user}"
  {:get
   {:description "Returns role mappings"
    ;; NOTE: Path-object level parameters not yet supported!!
    :parameters
    [{:name "id" :in "path" :required true
      :description "Role id"
      :schema {:type "string"}}
     {:name "user" :in "path" :required true
      :description "Username"
      :schema {:type "string"}}]
    :operationId "findUserRoleMapping"

    :responses
    {200 {:description "User-role mapping"
          :content
          {"application/json" {:schema {"$ref" "#/components/schemas/UserRoleMapping"}}
           "text/html;charset=utf-8" {:title "User Role Mapping"}}}}}

   :put
   {:description "Upserts a user-role mapping"
    :operationId "putUserRoleMapping"
    :parameters
    [{:name "id" :in "path" :required true
      :description "Role id"
      :schema {:type "string"}}
     {:name "user" :in "path" :required true
      :description "Username"
      :schema {:type "string"}}]
    :requestBody
    {:required true
     :content
     {"application/json" {:schema {"$ref" "#/components/schemas/UserRoleMapping"}}}}
    :responses
    {200 {:description "UserRoleMapping successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}
     201 {:description "UserRoleMapping successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}

  "/rules/"
  {:get
   {:description "Returns a list of all the rule"

    :responses
    {200
     {:crux/query
      {:find [e]
       :where [[e :juxt.site.alpha/type t]]
       :args [{t "Rule"}]}

      :content
      {"application/json"
       {:schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedRule"}}}
       "text/html;charset=utf-8"
       {:title "Rules"
        :type "edn-table"
        :schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedRule"}}}}}}}

   :post
   {:juxt.site.alpha/post-fn juxt.site.alpha.rules/post-rule
    :requestBody
    {:required true
     :content
     {"application/json"
      {:schema {"$ref" "#/components/schemas/Rule"}}}}}}

  "/rules/{id}"
  {:parameters
   [{:name "id" :in "path" :required true
     :description "Rule id"
     :schema {:type "string"}}]

   :get
   {:description "Returns a given rule",
    :responses
    {200
     {:description "Single identified rule"
      :content
      {"application/json"
       {:schema {"$ref" "#/components/schemas/Rule"}}

       "text/html;charset=utf-8"
       {:title "Rule"
        :schema {"$ref" "#/components/schemas/Rule"}}}}}}

   :put
   {:description "Upserts a rule"
    :requestBody
    {:required true
     :content
     {"application/json"
      {:schema {"$ref" "#/components/schemas/Rule"}}}}

    :responses
    {200 {:description "Rule successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}
     201 {:description "Rule successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}

  "/variants/"
  {:post
   {:juxt.site.alpha/post-fn juxt.site.alpha.handler/post-variant
    :description "Create a new association between a resource and a variant
    representation. This is used when there are multiple
    representations (variants) for a resource which are subject to
    content-negotiation."
    :requestBody
    {:required true
     :content
     {"application/json"
      {:schema {"$ref" "#/components/schemas/Variant"}}}}
    :responses
    {201 {:description "Variant successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}
     204 {:description "Variant successfully update"}}}}

  "/apis/"
  {:get
   {:description "Returns a list of all the APIs"
    :responses
    {200
     {:crux/query
      {:find [e]
       :where [[e :juxt.site.alpha/type t]]
       :args [{t "OpenAPI"}]}

      :content
      {"application/json"
       {:schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedOpenAPI"}}}

       "text/html;charset=utf-8"
       {:title "Rules"
        :type "edn-table"
        :schema {"type" "array"
                 "items" {"$ref" "#/components/schemas/IdentifiedOpenAPI"}}}}}}}}

  "/apis/{id}"
  {:parameters
   [{:name "id" :in "path" :required true
     :description "API id"
     :schema {:type "string"}}]

   :get
   {:description "Returns a given OpenAPI description"
    :responses
    {200
     {:description "Single identified API"
      :content
      {"application/json"
       {:schema {"$ref" "#/components/schemas/OpenAPI"}}

       "text/html;charset=utf-8"
       {:title "Rule"
        :schema {"$ref" "#/components/schemas/OpenAPI"}}}}}}

   :put
   {:description "Upserts an OpenAPI"
    :requestBody
    {:required true
     :content
     {"application/json"
      {:schema {"$ref" "#/components/schemas/OpenAPI"}}}}

    :responses
    {200 {:description "API successfully updated"
          :content
          {"text/plain;charset=utf-8" {}}}
     201 {:description "API successfully created"
          :content
          {"text/plain;charset=utf-8" {}}}}}}}

 :components
 {:schemas
  {"Identified"
   {"$id" "/schemas/Identified"
    :type "object"
    :description
    "The unique identifier of the document in the database. This is maps
    directly to the crux.db/id attribute."
    :required ["id"]
    :juxt.jinx.alpha/keyword-mappings {"id" "crux.db/id"}
    :properties
    {"id" {:type "string" :format "uri-reference"}}}

   "Named"
   {"$id" "/schemas/Named"
    :type "object"
    :required ["name"]
    :juxt.jinx.alpha/keyword-mappings {"name" "name"}
    :properties
    {"name" {:type "string" :minLength 1}}}

   "Typed"
   {"$id" "/schemas/Typed"
    :type "object"
    :required ["type"]
    :juxt.jinx.alpha/keyword-mappings {"type" "juxt.site.alpha/type"}
    :properties
    {"type" {:type "string" :minLength 1}}}

   "Role"
   {"$id" "/schemas/Role"
    :allOf
    [{"$ref" "#/components/schemas/Named"}
     {"$ref" "#/components/schemas/Typed"}
     {:properties
      {"type" {:const "Role"}
       "description" {:type "string"}}}]}

   "IdentifiedRole"
   {"$id" "/schemas/IdentifiedRole"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/Role"}]}

   "User"
   {"$id" "/schemas/User"
    :allOf
    [{"$ref" "#/components/schemas/Named"}
     {"$ref" "#/components/schemas/Typed"}
     {:type "object"
      :required []
      :juxt.jinx.alpha/keyword-mappings {"email" "email"
                                         "username" "juxt.pass.alpha/username"}
      :properties
      {"type" {:const "User"}
       "username" {:type "string" :minLength 1}
       "email" {:type "string"
                :format "email"}}}]}

   "IdentifiedUser"
   {"$id" "/schemas/IdentifiedUser"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/User"}]}

   "Password"
   {"$id" "/schemas/Password"
    :allOf
    [{"$ref" "#/components/schemas/Typed"}
     {:type "object"
      :required ["password" "user"]
      :juxt.jinx.alpha/keyword-mappings
      {"user" "juxt.pass.alpha/user"
       "password" "juxt.pass.alpha/password-hash"}
      :properties
      {"type" {:const "Password"}
       "user" {:type "string"
               :format "uri-reference"}
       "password" {:type "string"
                   :juxt.jinx.alpha/as "password"
                   :description "The user's password, stored as a hash at rest, and only transmitted in the clear when being set."}}}]}

   "UserRoleMapping"
   {"$id" "/schemas/UserRoleMapping"
    :allOf
    [{"$ref" "#/components/schemas/Typed"}
     {:type "object"
      :required ["assignee" "role" "assigner"]
      :juxt.jinx.alpha/keyword-mappings
      {"assignee" "juxt.pass.alpha/assignee"
       "role" "juxt.pass.alpha/role"
       "assigner" "juxt.pass.alpha/assigner"
       "businessJustification" "juxt.pass.alpha/business-justification"}
      :properties
      {"type" {:const "UserRoleMapping"}
       "assignee" {:type "string" :format "uri-reference"}
       "role" {:type "string" :format "uri-reference"}
       "assigner" {:type "string" :format "uri-reference"}
       "businessJustification"
       {:type "string"
        :description "The reason why the user has been assigned this role"}}}]}

   "Rule"
   {"$id" "/schemas/Rule"
    :allOf
    [{"$ref" "#/components/schemas/Typed"}
     {:type "object"
      :required ["target" "effect"]
      :juxt.jinx.alpha/keyword-mappings
      {"description" "juxt.pass.alpha/description"
       "target" "juxt.pass.alpha/target"
       "effect" "juxt.pass.alpha/effect"
       "maxContentLength" "juxt.http.alpha/max-content-length"}
      :properties
      {"type" {:const "Rule"}
       "description" {:type "string"}
       "target" {:type "string" :juxt.jinx.alpha/as "edn"}
       "effect" {:type "string" :juxt.jinx.alpha/as "keyword"}
       "maxContentLength" {:type "integer"}}}]}

   "IdentifiedRule"
   {"$id" "/schemas/IdentifiedRule"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/Rule"}]}

   "Variant"
   {"$id" "/schemas/Variant"
    :allOf
    [{"$ref" "#/components/schemas/Typed"}
     {:type "object"
      :required ["resource" "variant"]
      :juxt.jinx.alpha/keyword-mappings
      {"resource" "juxt.site.alpha/resource"
       "variant" "juxt.site.alpha/variant"}
      :properties
      {"type" {:const "Variant"}
       "resource" {:type "string"
                   :format "uri-reference"}
       "variant" {:type "string"
                  :format "uri-reference"}}}]}

   "OpenAPI"
   {"$id" "/schemas/OpenAPI"
    :allOf
    [{"$ref" "#/components/schemas/Typed"}
     {:type "object"
      ;; TODO: Use the actual JSON Schema for OpenAPI. Until this is done, there
      ;; won't be any validation on bad OpenAPI definitions.
      :required ["openapi"]
      :properties
      {"openapi" {:type "string"}}}]}

   "IdentifiedOpenAPI"
   {"$id" "/schemas/IdentifiedOpenAPI"
    :allOf
    [{"$ref" "#/components/schemas/Identified"}
     {"$ref" "#/components/schemas/OpenAPI"}]}}}}
