#_( ;; Allow this script to be executed directly
   "exec" "bb" "--classpath" "$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "RELEASE"}}}')" "$0" "$@"
   )

;;

(ns site
  (:require
   [babashka.curl :as curl]
   [clojure.tools.cli :refer [parse-opts summarize]]
   [clojure.java.io :as io]
   [clojure.java.shell :as sh]
   [cheshire.core :as json]
   [clojure.pprint :refer [pprint]]
   [clojure.edn :as edn]
   [io.aviso.ansi :as ansi]
   [clojure.string :as str]))

(def ^:dynamic *debug* nil)

(defn error! [msg]
  (println "ERROR:" msg)
  (System/exit 1))

(def config
  (case (System/getProperty "os.name")
    "Linux" {:storage-dir
             (let [dir (io/file (System/getProperty "user.home") ".local/share/site")]
               (if (.exists dir) dir
                   (if-not (.mkdirs dir)
                     (error! (str "Failed to make directory: " dir))
                     dir)))
             :encrypted-password-dir
             (let [dir (io/file
                        (System/getProperty "user.home")
                        ".password-store/site/webmaster.gpg")]
               (if (.exists dir) dir (error! (str "Encrypted password directory not found: " dir))))}

    (error! "Unsupported OS")))

(defn get-password []
  (let [{:keys [exit out]} (sh/sh "gpg" "-d" (str (:encrypted-password-dir config)))]
    (when (zero? exit) out)))

(defn get-token [opts]
  (let [{:keys [server uid password]} (:options opts)]
    (when-not server (error! "Server not specified"))
    (when-not uid (error! "User id required"))

    (let [{:keys [status body]}
          (curl/post
           (format "%s/_site/token" server)
           {:headers {"content-type" "application/x-www-form-urlencoded"}
            :basic-auth [uid (get-password)]
            :body "grant_type=client_credentials"
            :throw false})]
      (cond
        (= status 401)
        (do
          (println "Server response:" status body)
          (println "Are your credentials valid?"))
        ;; TODO: Store in correct Linux XDG location
        :else (spit (io/file (:storage-dir config) ".site-access-token") body)))))

(defn add-user [opts]
  (let [{:keys [token server uid password name role]} (:options opts)]
    (when-not server (error! "Server not specified"))
    (when-not token (error! "Access token required, use the get-token sub-command"))
    (let [{:keys [status body]}
          (curl/put
           (format "%s/_site/users/%s" server uid)
           {:headers {"authorization" (format "Bearer %s" token)
                      "content-type" "application/json"}
            :body (json/generate-string
                   {:type "User"
                    :userid uid
                    :name name})
            :throw false})]
      (cond
        (= status 401)
        (do
          (println "Server response:" status body)
          (println "Is your access-token valid?")
          (println)
          (println "To get a new access token, use the get-token sub-command"))))))

(defn install-openapi [options]
  (prn options))

(defn debugf
  "Write a debug message to the console, but only if *debug* is true."
  [& args]
  (when *debug*
    (println "DEBUG:" (apply format args))))

(def cli-options
  [["-t" "--token TOKEN" "Your access token for authentication purposes"]

   ["-s" "--server SERVER" "The address of the Site server you are managing"
    :default "https://home.juxt.site"]

   ["-d" "--debug" "Enable debug mode"]
   ["-v" "--verbose" "Verbose mode"]
   ["-h" "--help" "Show this summary"]])

(def commands
  {"get-token"
   {:description "Get an access token"
    :cli-options [["-u" "--uid USER" "Your user id"]]
    :delegate get-token}

   "add-user"
   {:description "Add a new user"
    :cli-options [["-n" "--name NAME" "The user's name"]
                  ["-u" "--uid USER" "The user id of the user you are adding"]
                  ["-p" "--password PASSWORD" "A temporary password for the user"]
                  ["-r" "--role ROLE" "Roles that the user has"]]
    :delegate add-user}

   "install-api"
   {:description "Install OpenAPI"
    :cli-options [["-f" "--openapi FILE" "OpenAPI description file"]]
    :delegate install-openapi}

   "install-app"
   {:description "Install app"
    :cli-options []}})

(let [{:keys [options arguments summary errors]}
      (parse-opts *command-line-args*  cli-options :in-order true)
      command (first arguments)
      {:keys [cli-options delegate]} (get commands (first arguments))

      print-summary
      (fn []
        (do
          (println "Site (Admin Tool)")
          (println)
          (println "This tool is to manage users, policies and apps in Site.")
          (println)
          (println summary)
          (println)
          (println "Subcommands:")
          (println)
          (doseq [[command {:keys [description cli-options delegate]}] commands]
            (apply
             println
             (remove nil? [command (str "(" description (when-not delegate " - coming soon!") ")")]))
            (println (:summary (parse-opts [] cli-options)))
            (println))
          (println "To get an access token:")
          (println "$ curl -X POST https://home.juxt.site/_site/token --user <user>:<password> -d grant_type=client_credentials")))]

  (cond
    (contains? options :help)
    (print-summary)

    errors
    (doseq [err errors]
      (println err))

    (find commands command)
    (binding [*debug* (:debug options)]
      (if delegate
        (delegate
         (-> (parse-opts (next arguments) cli-options)
             (update :options merge options)))
        (println "No implementation:" command)))

    (first arguments)
    (println "Unknown command:" (first arguments))

    :else
    (print-summary)))

;; Local Variables:
;; mode: clojure
;; End:
