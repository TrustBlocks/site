#_( ;; Allow this script to be executed directly
   "exec" "bb" "--classpath" "$(clojure -Spath -Sdeps '{:deps {io.aviso/pretty {:mvn/version "RELEASE"}}}')" "$0" "$@"
   )

;;

(ns site
  (:require
   [babashka.curl :as curl]
   [clojure.tools.cli :refer [parse-opts summarize]]
   [clojure.java.io :as io]
   [clojure.java.shell :as sh]
   [cheshire.core :as json]
   [clojure.pprint :refer [pprint]]
   [clojure.edn :as edn]
   [io.aviso.ansi :as ansi]))

(def ^:dynamic *debug* nil)

(defmacro with-status-message [msg & body]
  `(do
     (print (str ansi/yellow-font ~msg ansi/reset-font "..."))
     (let [result# ~@body]
       (println (str "[" ansi/bold-red-font "done" ansi/reset-font "]"))
       (println "Response was:")
       (pprint (select-keys result# [:status :headers]))
       result#)))

#_(def discover-openid-configuration-response
  (with-status-message
    (format "Get OpenID configuration")
    (curl/get
     (url "/.well-known/openid-configuration")
     {:headers {"accept" "application/json"}
      :throw true
      :debug CURL_DEBUG})))

#_(def put-time-openapi-response
  (let [openapi-file (io/file "openapi.edn")
        _ (assert (.exists openapi-file))
        openapi (edn/read-string (slurp openapi-file))
        openapi.json (json/generate-string openapi)]
    (with-status-message
      (format "PUT %s (%s)" (get-in openapi [:info :title]) (get-in openapi [:info :version]))
      (curl/put
       (url "/_site/apis/time/openapi.json")
       {:headers {"content-type" "application/vnd.oai.openapi+json;version=3.0.2"}
        :body openapi.json
        :throw true
        }))))

#_(assert (#{200 201} (:status put-time-openapi-response)))

(defn deploy [options]
  (prn options)
  )

(defn debugf
  "Write a debug message to the console, but only if *debug* is true."
  [& args]
  (when *debug*
    (println "DEBUG:" (apply format args))))

(def cli-options
  [["-h" "--help" "Show this summary"]
   ["-v" "--verbose" "Verbose mode"]
   ["-t" "--token TOKEN" "Access token"]
   ["-d" "--debug" "Debug mode"]])

(def commands
  {"deploy"
   {:description "Deploy app"
    :cli-options [["-h" "--host HOST" "Host"]]
    :delegate deploy}
   })

(let [{:keys [options arguments summary errors]}
      (parse-opts *command-line-args*  cli-options :in-order true)
      command (first arguments)
      {:keys [cli-options delegate]} (get commands (first arguments))

      print-summary
      (fn []
        (do
          (println "Site (Admin Tool)")
          (println)
          (println "This tool is to manage users, policies and apps in Site.")
          (println)
          (println summary)
          (doseq [[command {:keys [description cli-options delegate]}] commands]
            (apply
             println
             (remove nil? [command "\t" description
                           (when-not delegate "(coming soon!)")]))
            (println "\t" (:summary (parse-opts [] cli-options))))
          (println)
          (println "To get an access token:")
          (println "$ curl -X POST https://home.juxt.site/_site/token --user <user>:<password> -d grant_type=client_credentials")))]

  (cond
    (contains? options :help)
    (print-summary)

    errors
    (doseq [err errors]
      (println err))

    (find commands command)
    (binding [*debug* (:debug options)]
      (if delegate
        (delegate
         (-> (parse-opts (next arguments) cli-options)
             (update :options merge options)))
        (println "No implementation:" command)))

    (first arguments)
    (println "Unknown command:" (first arguments))

    :else
    (print-summary)))

;; Local Variables:
;; mode: clojure
;; End:
